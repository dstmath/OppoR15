package org.apache.xalan.processor;

import java.util.HashMap;
import org.apache.xalan.templates.Constants;
import org.apache.xalan.templates.ElemApplyImport;
import org.apache.xalan.templates.ElemApplyTemplates;
import org.apache.xalan.templates.ElemAttribute;
import org.apache.xalan.templates.ElemCallTemplate;
import org.apache.xalan.templates.ElemChoose;
import org.apache.xalan.templates.ElemComment;
import org.apache.xalan.templates.ElemCopy;
import org.apache.xalan.templates.ElemCopyOf;
import org.apache.xalan.templates.ElemElement;
import org.apache.xalan.templates.ElemExsltFuncResult;
import org.apache.xalan.templates.ElemExsltFunction;
import org.apache.xalan.templates.ElemExtensionDecl;
import org.apache.xalan.templates.ElemExtensionScript;
import org.apache.xalan.templates.ElemFallback;
import org.apache.xalan.templates.ElemForEach;
import org.apache.xalan.templates.ElemIf;
import org.apache.xalan.templates.ElemLiteralResult;
import org.apache.xalan.templates.ElemMessage;
import org.apache.xalan.templates.ElemNumber;
import org.apache.xalan.templates.ElemOtherwise;
import org.apache.xalan.templates.ElemPI;
import org.apache.xalan.templates.ElemParam;
import org.apache.xalan.templates.ElemSort;
import org.apache.xalan.templates.ElemTemplate;
import org.apache.xalan.templates.ElemText;
import org.apache.xalan.templates.ElemTextLiteral;
import org.apache.xalan.templates.ElemUnknown;
import org.apache.xalan.templates.ElemValueOf;
import org.apache.xalan.templates.ElemVariable;
import org.apache.xalan.templates.ElemWhen;
import org.apache.xalan.templates.ElemWithParam;
import org.apache.xml.utils.QName;

public class XSLTSchema extends XSLTElementDef {
    private HashMap m_availElems = new HashMap();

    XSLTSchema() {
        build();
    }

    void build() {
        XSLTAttributeDef hrefAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_HREF, 2, true, false, 1);
        XSLTAttributeDef elementsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_ELEMENTS, 12, true, false, 1);
        XSLTAttributeDef methodAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_METHOD, 9, false, false, 1);
        XSLTAttributeDef versionAttr = new XSLTAttributeDef(null, "version", 13, false, false, 1);
        XSLTAttributeDef encodingAttr = new XSLTAttributeDef(null, "encoding", 1, false, false, 1);
        XSLTAttributeDef omitXmlDeclarationAttr = new XSLTAttributeDef(null, "omit-xml-declaration", 8, false, false, 1);
        XSLTAttributeDef standaloneAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_STANDALONE, 8, false, false, 1);
        XSLTAttributeDef doctypePublicAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_DOCTYPE_PUBLIC, 1, false, false, 1);
        XSLTAttributeDef doctypeSystemAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_DOCTYPE_SYSTEM, 1, false, false, 1);
        XSLTAttributeDef cdataSectionElementsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS, 19, false, false, 1);
        XSLTAttributeDef indentAttr = new XSLTAttributeDef(null, "indent", 8, false, false, 1);
        XSLTAttributeDef mediaTypeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_MEDIATYPE, 1, false, false, 1);
        XSLTAttributeDef nameAttrRequired = new XSLTAttributeDef(null, "name", 9, true, false, 1);
        XSLTAttributeDef nameAVTRequired = new XSLTAttributeDef(null, "name", 18, true, true, 2);
        XSLTAttributeDef nameAVT_NCNAMERequired = new XSLTAttributeDef(null, "name", 17, true, true, 2);
        XSLTAttributeDef nameAttrOpt_ERROR = new XSLTAttributeDef(null, "name", 9, false, false, 1);
        XSLTAttributeDef useAttr = new XSLTAttributeDef(null, "use", 5, true, false, 1);
        XSLTAttributeDef namespaceAVTOpt = new XSLTAttributeDef(null, Constants.ATTRNAME_NAMESPACE, 2, false, true, 2);
        XSLTAttributeDef decimalSeparatorAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DECIMALSEPARATOR, 6, false, 1, Constants.ATTRVAL_THIS);
        XSLTAttributeDef infinityAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_INFINITY, 1, false, 1, Constants.ATTRVAL_INFINITY);
        XSLTAttributeDef minusSignAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_MINUSSIGN, 6, false, 1, "-");
        XSLTAttributeDef NaNAttr = new XSLTAttributeDef(null, "NaN", 1, false, 1, "NaN");
        XSLTAttributeDef percentAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PERCENT, 6, false, 1, "%");
        XSLTAttributeDef perMilleAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PERMILLE, 6, false, false, 1);
        XSLTAttributeDef zeroDigitAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_ZERODIGIT, 6, false, 1, "0");
        XSLTAttributeDef digitAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DIGIT, 6, false, 1, "#");
        XSLTAttributeDef patternSeparatorAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PATTERNSEPARATOR, 6, false, 1, ";");
        XSLTAttributeDef groupingSeparatorAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_GROUPINGSEPARATOR, 6, false, 1, ",");
        XSLTAttributeDef useAttributeSetsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_USEATTRIBUTESETS, 10, false, false, 1);
        XSLTAttributeDef testAttrRequired = new XSLTAttributeDef(null, Constants.ATTRNAME_TEST, 5, true, false, 1);
        XSLTAttributeDef selectAttrRequired = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, true, false, 1);
        XSLTAttributeDef selectAttrOpt = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, false, false, 1);
        XSLTAttributeDef selectAttrDefNode = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, false, 1, "node()");
        XSLTAttributeDef selectAttrDefDot = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, false, 1, Constants.ATTRVAL_THIS);
        XSLTAttributeDef matchAttrRequired = new XSLTAttributeDef(null, Constants.ATTRNAME_MATCH, 4, true, false, 1);
        XSLTAttributeDef matchAttrOpt = new XSLTAttributeDef(null, Constants.ATTRNAME_MATCH, 4, false, false, 1);
        XSLTAttributeDef priorityAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PRIORITY, 7, false, false, 1);
        XSLTAttributeDef modeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_MODE, 9, false, false, 1);
        XSLTAttributeDef spaceAttr = new XSLTAttributeDef("http://www.w3.org/XML/1998/namespace", "space", false, false, false, 2, Constants.ATTRNAME_DEFAULT, 2, "preserve", 1);
        XSLTAttributeDef spaceAttrLiteral = new XSLTAttributeDef("http://www.w3.org/XML/1998/namespace", "space", 2, false, true, 1);
        XSLTAttributeDef stylesheetPrefixAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_STYLESHEET_PREFIX, 1, true, false, 1);
        XSLTAttributeDef resultPrefixAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_RESULT_PREFIX, 1, true, false, 1);
        XSLTAttributeDef disableOutputEscapingAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DISABLE_OUTPUT_ESCAPING, 8, false, false, 1);
        new XSLTAttributeDef(null, Constants.ATTRNAME_LEVEL, false, false, false, 1, Constants.ATTRVAL_SINGLE, 1, Constants.ATTRVAL_MULTI, 2, "any", 3).setDefault(Constants.ATTRVAL_SINGLE);
        XSLTAttributeDef countAttr = new XSLTAttributeDef(null, "count", 4, false, false, 1);
        XSLTAttributeDef fromAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_FROM, 4, false, false, 1);
        XSLTAttributeDef valueAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_VALUE, 5, false, false, 1);
        new XSLTAttributeDef(null, Constants.ATTRNAME_FORMAT, 1, false, true, 1).setDefault("1");
        XSLTAttributeDef langAttr = new XSLTAttributeDef(null, "lang", 13, false, true, 1);
        XSLTAttributeDef letterValueAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_LETTERVALUE, false, true, false, 1, Constants.ATTRVAL_ALPHABETIC, 1, Constants.ATTRVAL_TRADITIONAL, 2);
        XSLTAttributeDef groupingSeparatorAVT = new XSLTAttributeDef(null, Constants.ATTRNAME_GROUPINGSEPARATOR, 6, false, true, 1);
        XSLTAttributeDef groupingSizeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_GROUPINGSIZE, 7, false, true, 1);
        new XSLTAttributeDef(null, Constants.ATTRNAME_DATATYPE, false, true, true, 1, "text", 1, "number", 1).setDefault("text");
        new XSLTAttributeDef(null, Constants.ATTRNAME_ORDER, false, true, false, 1, Constants.ATTRVAL_ORDER_ASCENDING, 1, Constants.ATTRVAL_ORDER_DESCENDING, 2).setDefault(Constants.ATTRVAL_ORDER_ASCENDING);
        XSLTAttributeDef caseOrderAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_CASEORDER, false, true, false, 1, Constants.ATTRVAL_CASEORDER_UPPER, 1, Constants.ATTRVAL_CASEORDER_LOWER, 2);
        new XSLTAttributeDef(null, Constants.ATTRNAME_TERMINATE, 8, false, false, 1).setDefault("no");
        XSLTAttributeDef xslExcludeResultPrefixesAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_EXCLUDE_RESULT_PREFIXES, 20, false, false, 1);
        XSLTAttributeDef xslExtensionElementPrefixesAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_EXTENSIONELEMENTPREFIXES, 15, false, false, 1);
        XSLTAttributeDef xslUseAttributeSetsAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_USEATTRIBUTESETS, 10, false, false, 1);
        XSLTAttributeDef xslVersionAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "version", 13, false, false, 1);
        XSLTElementDef charData = new XSLTElementDef(this, null, "text()", null, null, null, new ProcessorCharacters(), ElemTextLiteral.class);
        charData.setType(2);
        XSLTElementDef whiteSpaceOnly = new XSLTElementDef(this, null, "text()", null, null, null, null, ElemTextLiteral.class);
        charData.setType(2);
        XSLTAttributeDef resultAttr = new XSLTAttributeDef(null, "*", 3, false, true, 2);
        XSLTAttributeDef xslResultAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "*", 1, false, false, 2);
        Object templateElements = new XSLTElementDef[23];
        templateElementsAndParams = new XSLTElementDef[24];
        templateElementsAndSort = new XSLTElementDef[24];
        Object exsltFunctionElements = new XSLTElementDef[24];
        charTemplateElements = new XSLTElementDef[15];
        XSLTElementDef resultElement = new XSLTElementDef(this, null, "*", null, (XSLTElementDef[]) templateElements, new XSLTAttributeDef[]{spaceAttrLiteral, xslExcludeResultPrefixesAttr, xslExtensionElementPrefixesAttr, xslUseAttributeSetsAttr, xslVersionAttr, xslResultAttr, resultAttr}, new ProcessorLRE(), ElemLiteralResult.class, 20, true);
        XSLTElementDef unknownElement = new XSLTElementDef(this, "*", "unknown", null, (XSLTElementDef[]) templateElementsAndParams, new XSLTAttributeDef[]{xslExcludeResultPrefixesAttr, xslExtensionElementPrefixesAttr, xslUseAttributeSetsAttr, xslVersionAttr, xslResultAttr, resultAttr}, new ProcessorUnknown(), ElemUnknown.class, 20, true);
        XSLTElementDef xslValueOf = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VALUEOF_STRING, null, null, new XSLTAttributeDef[]{selectAttrRequired, disableOutputEscapingAttr}, new ProcessorTemplateElem(), ElemValueOf.class, 20, true);
        XSLTElementDef xslCopyOf = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COPY_OF_STRING, null, null, new XSLTAttributeDef[]{selectAttrRequired}, new ProcessorTemplateElem(), ElemCopyOf.class, 20, true);
        XSLTElementDef xslNumber = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "number", null, null, new XSLTAttributeDef[]{levelAttr, countAttr, fromAttr, valueAttr, formatAttr, langAttr, letterValueAttr, groupingSeparatorAVT, groupingSizeAttr}, new ProcessorTemplateElem(), ElemNumber.class, 20, true);
        XSLTElementDef xslSort = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_SORT_STRING, null, null, new XSLTAttributeDef[]{selectAttrDefDot, langAttr, dataTypeAttr, orderAttr, caseOrderAttr}, new ProcessorTemplateElem(), ElemSort.class, 19, true);
        XSLTElementDef[] xSLTElementDefArr = templateElements;
        XSLTElementDef xslWithParam = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_WITHPARAM_STRING, null, xSLTElementDefArr, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorTemplateElem(), ElemWithParam.class, 19, true);
        XSLTElementDef xslApplyTemplates = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_APPLY_TEMPLATES_STRING, null, new XSLTElementDef[]{xslSort, xslWithParam}, new XSLTAttributeDef[]{selectAttrDefNode, modeAttr}, new ProcessorTemplateElem(), ElemApplyTemplates.class, 20, true);
        XSLTElementDef xslApplyImports = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_APPLY_IMPORTS_STRING, null, null, new XSLTAttributeDef[0], new ProcessorTemplateElem(), ElemApplyImport.class);
        Object obj = templateElementsAndSort;
        XSLTElementDef xslForEach = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_FOREACH_STRING, null, obj, new XSLTAttributeDef[]{selectAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemForEach.class, true, false, true, 20, true);
        XSLTElementDef[] xSLTElementDefArr2 = templateElements;
        XSLTElementDef xslIf = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_IF_STRING, null, xSLTElementDefArr2, new XSLTAttributeDef[]{testAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemIf.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr3 = templateElements;
        XSLTElementDef xslWhen = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_WHEN_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{testAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemWhen.class, false, true, 1, true);
        XSLTElementDef[] xSLTElementDefArr4 = templateElements;
        XSLTElementDef xslOtherwise = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_OTHERWISE_STRING, null, xSLTElementDefArr4, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemOtherwise.class, false, false, 2, false);
        XSLTElementDef xslChoose = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_CHOOSE_STRING, null, new XSLTElementDef[]{xslWhen, xslOtherwise}, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemChoose.class, true, false, true, 20, true);
        XSLTElementDef[] xSLTElementDefArr5 = charTemplateElements;
        XSLTElementDef xslAttribute = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "attribute", null, xSLTElementDefArr5, new XSLTAttributeDef[]{nameAVTRequired, namespaceAVTOpt, spaceAttr}, new ProcessorTemplateElem(), ElemAttribute.class, 20, true);
        XSLTElementDef xslCallTemplate = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_CALLTEMPLATE_STRING, null, new XSLTElementDef[]{xslWithParam}, new XSLTAttributeDef[]{nameAttrRequired}, new ProcessorTemplateElem(), ElemCallTemplate.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr6 = templateElements;
        XSLTElementDef xslVariable = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VARIABLE_STRING, null, xSLTElementDefArr6, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorTemplateElem(), ElemVariable.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr7 = templateElements;
        XSLTElementDef xslParam = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PARAMVARIABLE_STRING, null, xSLTElementDefArr7, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorTemplateElem(), ElemParam.class, 19, true);
        XSLTElementDef xslText = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "text", null, new XSLTElementDef[]{charData}, new XSLTAttributeDef[]{disableOutputEscapingAttr}, new ProcessorText(), ElemText.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr8 = charTemplateElements;
        XSLTElementDef xslProcessingInstruction = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PI_STRING, null, xSLTElementDefArr8, new XSLTAttributeDef[]{nameAVT_NCNAMERequired, spaceAttr}, new ProcessorTemplateElem(), ElemPI.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr9 = templateElements;
        XSLTElementDef xslElement = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "element", null, xSLTElementDefArr9, new XSLTAttributeDef[]{nameAVTRequired, namespaceAVTOpt, useAttributeSetsAttr, spaceAttr}, new ProcessorTemplateElem(), ElemElement.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr10 = charTemplateElements;
        XSLTElementDef xslComment = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COMMENT_STRING, null, xSLTElementDefArr10, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemComment.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr11 = templateElements;
        XSLTElementDef xslCopy = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COPY_STRING, null, xSLTElementDefArr11, new XSLTAttributeDef[]{spaceAttr, useAttributeSetsAttr}, new ProcessorTemplateElem(), ElemCopy.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr12 = templateElements;
        XSLTElementDef xslMessage = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_MESSAGE_STRING, null, xSLTElementDefArr12, new XSLTAttributeDef[]{terminateAttr}, new ProcessorTemplateElem(), ElemMessage.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr13 = templateElements;
        XSLTElementDef xslFallback = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_FALLBACK_STRING, null, xSLTElementDefArr13, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemFallback.class, 20, true);
        Object obj2 = exsltFunctionElements;
        XSLTElementDef exsltFunction = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_EXSLT_FUNCTIONS_URL, Constants.EXSLT_ELEMNAME_FUNCTION_STRING, null, obj2, new XSLTAttributeDef[]{nameAttrRequired}, new ProcessorExsltFunction(), ElemExsltFunction.class);
        XSLTElementDef[] xSLTElementDefArr14 = templateElements;
        XSLTElementDef exsltResult = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_EXSLT_FUNCTIONS_URL, Constants.EXSLT_ELEMNAME_FUNCRESULT_STRING, null, xSLTElementDefArr14, new XSLTAttributeDef[]{selectAttrOpt}, new ProcessorExsltFuncResult(), ElemExsltFuncResult.class);
        templateElements[0] = charData;
        int i = 1 + 1;
        templateElements[1] = xslApplyTemplates;
        int i2 = i + 1;
        templateElements[i] = xslCallTemplate;
        i = i2 + 1;
        templateElements[i2] = xslApplyImports;
        i2 = i + 1;
        templateElements[i] = xslForEach;
        i = i2 + 1;
        templateElements[i2] = xslValueOf;
        i2 = i + 1;
        templateElements[i] = xslCopyOf;
        i = i2 + 1;
        templateElements[i2] = xslNumber;
        i2 = i + 1;
        templateElements[i] = xslChoose;
        i = i2 + 1;
        templateElements[i2] = xslIf;
        i2 = i + 1;
        templateElements[i] = xslText;
        i = i2 + 1;
        templateElements[i2] = xslCopy;
        i2 = i + 1;
        templateElements[i] = xslVariable;
        i = i2 + 1;
        templateElements[i2] = xslMessage;
        i2 = i + 1;
        templateElements[i] = xslFallback;
        i = i2 + 1;
        templateElements[i2] = xslProcessingInstruction;
        i2 = i + 1;
        templateElements[i] = xslComment;
        i = i2 + 1;
        templateElements[i2] = xslElement;
        i2 = i + 1;
        templateElements[i] = xslAttribute;
        i = i2 + 1;
        templateElements[i2] = resultElement;
        i2 = i + 1;
        templateElements[i] = unknownElement;
        i = i2 + 1;
        templateElements[i2] = exsltFunction;
        i2 = i + 1;
        templateElements[i] = exsltResult;
        System.arraycopy(templateElements, 0, templateElementsAndParams, 0, i2);
        System.arraycopy(templateElements, 0, templateElementsAndSort, 0, i2);
        System.arraycopy(templateElements, 0, exsltFunctionElements, 0, i2);
        templateElementsAndParams[i2] = xslParam;
        templateElementsAndSort[i2] = xslSort;
        exsltFunctionElements[i2] = xslParam;
        charTemplateElements[0] = charData;
        i = 1 + 1;
        charTemplateElements[1] = xslApplyTemplates;
        i2 = i + 1;
        charTemplateElements[i] = xslCallTemplate;
        i = i2 + 1;
        charTemplateElements[i2] = xslApplyImports;
        i2 = i + 1;
        charTemplateElements[i] = xslForEach;
        i = i2 + 1;
        charTemplateElements[i2] = xslValueOf;
        i2 = i + 1;
        charTemplateElements[i] = xslCopyOf;
        i = i2 + 1;
        charTemplateElements[i2] = xslNumber;
        i2 = i + 1;
        charTemplateElements[i] = xslChoose;
        i = i2 + 1;
        charTemplateElements[i2] = xslIf;
        i2 = i + 1;
        charTemplateElements[i] = xslText;
        i = i2 + 1;
        charTemplateElements[i2] = xslCopy;
        i2 = i + 1;
        charTemplateElements[i] = xslVariable;
        i = i2 + 1;
        charTemplateElements[i2] = xslMessage;
        i2 = i + 1;
        charTemplateElements[i] = xslFallback;
        XSLTElementDef importDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_IMPORT_STRING, null, null, new XSLTAttributeDef[]{hrefAttr}, new ProcessorImport(), null, 1, true);
        XSLTElementDef includeDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_INCLUDE_STRING, null, null, new XSLTAttributeDef[]{hrefAttr}, new ProcessorInclude(), null, 20, true);
        XSLTAttributeDef[] scriptAttrs = new XSLTAttributeDef[]{new XSLTAttributeDef(null, "lang", 13, true, false, 2), new XSLTAttributeDef(null, "src", 2, false, false, 2)};
        XSLTAttributeDef[] componentAttrs = new XSLTAttributeDef[]{new XSLTAttributeDef(null, "prefix", 13, true, false, 2), new XSLTAttributeDef(null, Constants.ATTRNAME_ELEMENTS, 14, false, false, 2), new XSLTAttributeDef(null, Constants.ELEMNAME_EXTENSION_STRING, 14, false, false, 2)};
        XSLTElementDef[] topLevelElements = new XSLTElementDef[17];
        topLevelElements[0] = includeDef;
        topLevelElements[1] = importDef;
        topLevelElements[2] = whiteSpaceOnly;
        topLevelElements[3] = unknownElement;
        topLevelElements[4] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_STRIPSPACE_STRING, null, null, new XSLTAttributeDef[]{elementsAttr}, new ProcessorStripSpace(), null, 20, true);
        topLevelElements[5] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PRESERVESPACE_STRING, null, null, new XSLTAttributeDef[]{elementsAttr}, new ProcessorPreserveSpace(), null, 20, true);
        topLevelElements[6] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_OUTPUT_STRING, null, null, new XSLTAttributeDef[]{methodAttr, versionAttr, encodingAttr, omitXmlDeclarationAttr, standaloneAttr, doctypePublicAttr, doctypeSystemAttr, cdataSectionElementsAttr, indentAttr, mediaTypeAttr, XSLTAttributeDef.m_foreignAttr}, new ProcessorOutputElem(), null, 20, true);
        topLevelElements[7] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "key", null, null, new XSLTAttributeDef[]{nameAttrRequired, matchAttrRequired, useAttr}, new ProcessorKey(), null, 20, true);
        topLevelElements[8] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_DECIMALFORMAT_STRING, null, null, new XSLTAttributeDef[]{nameAttrOpt_ERROR, decimalSeparatorAttr, groupingSeparatorAttr, infinityAttr, minusSignAttr, NaNAttr, percentAttr, perMilleAttr, zeroDigitAttr, digitAttr, patternSeparatorAttr}, new ProcessorDecimalFormat(), null, 20, true);
        topLevelElements[9] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "attribute-set", null, new XSLTElementDef[]{xslAttribute}, new XSLTAttributeDef[]{nameAttrRequired, useAttributeSetsAttr}, new ProcessorAttributeSet(), null, 20, true);
        XSLTElementDef[] xSLTElementDefArr15 = templateElements;
        topLevelElements[10] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VARIABLE_STRING, null, xSLTElementDefArr15, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorGlobalVariableDecl(), ElemVariable.class, 20, true);
        xSLTElementDefArr15 = templateElements;
        topLevelElements[11] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PARAMVARIABLE_STRING, null, xSLTElementDefArr15, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorGlobalParamDecl(), ElemParam.class, 20, true);
        Object obj3 = templateElementsAndParams;
        topLevelElements[12] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_TEMPLATE_STRING, null, obj3, new XSLTAttributeDef[]{matchAttrOpt, nameAttrOpt_ERROR, priorityAttr, modeAttr, spaceAttr}, new ProcessorTemplate(), ElemTemplate.class, true, 20, true);
        topLevelElements[13] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_NSALIAS_STRING, null, null, new XSLTAttributeDef[]{stylesheetPrefixAttr, resultPrefixAttr}, new ProcessorNamespaceAlias(), null, 20, true);
        String str = Constants.ELEMNAME_COMPONENT_STRING;
        XSLTElementDef[] xSLTElementDefArr16 = new XSLTElementDef[1];
        xSLTElementDefArr16[0] = new XSLTElementDef(this, "http://xml.apache.org/xalan", Constants.ELEMNAME_SCRIPT_STRING, null, new XSLTElementDef[]{charData}, scriptAttrs, new ProcessorLRE(), ElemExtensionScript.class, 20, true);
        topLevelElements[14] = new XSLTElementDef(this, "http://xml.apache.org/xalan", str, null, xSLTElementDefArr16, componentAttrs, new ProcessorLRE(), ElemExtensionDecl.class);
        String str2 = org.apache.xml.utils.Constants.S_BUILTIN_OLD_EXTENSIONS_URL;
        str = Constants.ELEMNAME_COMPONENT_STRING;
        xSLTElementDefArr16 = new XSLTElementDef[1];
        xSLTElementDefArr16[0] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_BUILTIN_OLD_EXTENSIONS_URL, Constants.ELEMNAME_SCRIPT_STRING, null, new XSLTElementDef[]{charData}, scriptAttrs, new ProcessorLRE(), ElemExtensionScript.class, 20, true);
        topLevelElements[15] = new XSLTElementDef(this, str2, str, null, xSLTElementDefArr16, componentAttrs, new ProcessorLRE(), ElemExtensionDecl.class);
        topLevelElements[16] = exsltFunction;
        XSLTAttributeDef excludeResultPrefixesAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_EXCLUDE_RESULT_PREFIXES, 20, false, false, 2);
        XSLTAttributeDef extensionElementPrefixesAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_EXTENSIONELEMENTPREFIXES, 15, false, false, 2);
        XSLTAttributeDef idAttr = new XSLTAttributeDef(null, "id", 1, false, false, 2);
        XSLTAttributeDef versionAttrRequired = new XSLTAttributeDef(null, "version", 13, true, false, 2);
        XSLTElementDef[] xSLTElementDefArr17 = topLevelElements;
        XSLTElementDef stylesheetElemDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_STYLESHEET_STRING, Constants.ELEMNAME_TRANSFORM_STRING, xSLTElementDefArr17, new XSLTAttributeDef[]{extensionElementPrefixesAttr, excludeResultPrefixesAttr, idAttr, versionAttrRequired, spaceAttr}, new ProcessorStylesheetElement(), null, true, -1, false);
        importDef.setElements(new XSLTElementDef[]{stylesheetElemDef, resultElement, unknownElement});
        includeDef.setElements(new XSLTElementDef[]{stylesheetElemDef, resultElement, unknownElement});
        build(null, null, null, new XSLTElementDef[]{stylesheetElemDef, whiteSpaceOnly, resultElement, unknownElement}, null, new ProcessorStylesheetDoc(), null);
    }

    public HashMap getElemsAvailable() {
        return this.m_availElems;
    }

    void addAvailableElement(QName elemName) {
        this.m_availElems.put(elemName, elemName);
    }

    public boolean elementAvailable(QName elemName) {
        return this.m_availElems.containsKey(elemName);
    }
}
